Learning notes for "opencv3 introduction to programming"
Created by Xiaoxiao
2019.8.14

Chapter 4

格式化输出方法

1.randu(dst, low, high) ; //产生随机数来填充矩阵
dst – 输出数组或矩阵 ；low – 区间下界（闭区间）； high - 区间上界（开区间）

2.后面有::的一定是类名或命名空间名

3.C++换行符 "\"

4.cv::Formatter Enumerator:
                FMT_DEFAULT
                FMT_MATLAB
                FMT_CSV //CSV: common separated values
                FMT_PYTHON
                FMT_NUMPY
                FMT_C

#include<opencv2/opencv.hpp>
#include<vector>

int main(int argc, char** argv)
{

        cv::Mat r = cv::Mat(10, 3, CV_8UC3);
        randu(r, cv::Scalar::all(0), cv::Scalar::all(255));

        std::cout << "opencv默认风格：" <<std::endl<< r << ";" << std::endl << std::endl;
        std::cout << "python风格：" << std::endl \
                << format(r, cv::Formatter::FMT_PYTHON) << ";" << std::endl << std::endl;
        std::cout << "CSV风格：" << std::endl \
                << format(r, cv::Formatter::FMT_CSV) << ";" << std::endl << std::endl;
        std::cout << "Numpy风格：" << std::endl \
                << format(r, cv::Formatter::FMT_NUMPY) << ";" << std::endl << std::endl;
        std::cout << "C风格：" << std::endl \
                << format(r, cv::Formatter::FMT_C) << ";" << std::endl << std::endl;
        system("pause");
        return 0;
}

输出：

opencv默认风格：
[ 91,   2,  79, 179,  52, 205, 236,   8, 181;
 239,  26, 248, 207, 218,  45, 183, 158, 101;
 102,  18, 118,  68, 210, 139, 198, 207, 211;
 181, 162, 197, 191, 196,  40,   7, 243, 230;
  45,   6,  48, 173, 242, 125, 175,  90,  63;
  90,  22, 112, 221, 167, 224, 113, 208, 123;
 214,  35, 229,   6, 143, 138,  98,  81, 118;
 187, 167, 140, 218, 178,  23,  43, 133, 154;
 150,  76, 101,   8,  38, 238,  84,  47,   7;
 117, 246, 163, 237,  69, 129,  60, 101,  41];

python风格：
[[[ 91,   2,  79], [179,  52, 205], [236,   8, 181]],
 [[239,  26, 248], [207, 218,  45], [183, 158, 101]],
 [[102,  18, 118], [ 68, 210, 139], [198, 207, 211]],
 [[181, 162, 197], [191, 196,  40], [  7, 243, 230]],
 [[ 45,   6,  48], [173, 242, 125], [175,  90,  63]],
 [[ 90,  22, 112], [221, 167, 224], [113, 208, 123]],
 [[214,  35, 229], [  6, 143, 138], [ 98,  81, 118]],
 [[187, 167, 140], [218, 178,  23], [ 43, 133, 154]],
 [[150,  76, 101], [  8,  38, 238], [ 84,  47,   7]],
 [[117, 246, 163], [237,  69, 129], [ 60, 101,  41]]];

CSV风格：
 91,   2,  79, 179,  52, 205, 236,   8, 181
239,  26, 248, 207, 218,  45, 183, 158, 101
102,  18, 118,  68, 210, 139, 198, 207, 211
181, 162, 197, 191, 196,  40,   7, 243, 230
 45,   6,  48, 173, 242, 125, 175,  90,  63
 90,  22, 112, 221, 167, 224, 113, 208, 123
214,  35, 229,   6, 143, 138,  98,  81, 118
187, 167, 140, 218, 178,  23,  43, 133, 154
150,  76, 101,   8,  38, 238,  84,  47,   7
117, 246, 163, 237,  69, 129,  60, 101,  41
;

Numpy风格：
array([[[ 91,   2,  79], [179,  52, 205], [236,   8, 181]],
       [[239,  26, 248], [207, 218,  45], [183, 158, 101]],
       [[102,  18, 118], [ 68, 210, 139], [198, 207, 211]],
       [[181, 162, 197], [191, 196,  40], [  7, 243, 230]],
       [[ 45,   6,  48], [173, 242, 125], [175,  90,  63]],
       [[ 90,  22, 112], [221, 167, 224], [113, 208, 123]],
       [[214,  35, 229], [  6, 143, 138], [ 98,  81, 118]],
       [[187, 167, 140], [218, 178,  23], [ 43, 133, 154]],
       [[150,  76, 101], [  8,  38, 238], [ 84,  47,   7]],
       [[117, 246, 163], [237,  69, 129], [ 60, 101,  41]]], dtype='uint8');

C风格：
{ 91,   2,  79, 179,  52, 205, 236,   8, 181,
 239,  26, 248, 207, 218,  45, 183, 158, 101,
 102,  18, 118,  68, 210, 139, 198, 207, 211,
 181, 162, 197, 191, 196,  40,   7, 243, 230,
  45,   6,  48, 173, 242, 125, 175,  90,  63,
  90,  22, 112, 221, 167, 224, 113, 208, 123,
 214,  35, 229,   6, 143, 138,  98,  81, 118,
 187, 167, 140, 218, 178,  23,  43, 133, 154,
 150,  76, 101,   8,  38, 238,  84,  47,   7,
 117, 246, 163, 237,  69, 129,  60, 101,  41};
